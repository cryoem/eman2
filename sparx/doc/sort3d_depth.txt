~~NOTOC~~

===== sxsort3d_depth =====
3D Clustering - SORT3D_DEPTH: Reproducible 3D Clustering on heterogeneous dataset and the 3D parameters of the data remain unchanged during the clustering.

\\
===== Usage =====

Usage in command line

  sxsort3d_depth.py  --refinement_dir=DIR  --instack=STACK_FILE  --output_dir=DIR  --niter_for_sorting=NUM_OF_ITERATIONS  --nxinit=INITIAL_IMAGE_SIZE  --mask3D=MASK3D_FILE  --focus=FOCUS3D_FILE  --radius=PARTICLE_RADIUS  --nstep=minimum_grp_steps --sym=SYMMETRY  --img_per_grp=NUM_OF_IMAGES    --memory_per_node=MEMORY_SIZE  --depth_order=DEPTH_ORDER   --orientation_groups=NUM_OF_ORIEN_GROUPS  --not_include_unaccounted  --nsmear=NUMBER_OF_SMEAR --notapplybckgnoise  --check_smearing --num_core_set=NUM_OF_MIN_IMAGES --overhead=SOME_NUMBER --compute_on_the_fly --use_umat --not_freeze_groups

\\
===== Typical usage =====

sxsort3d_depth.py exists only in MPI version. It surports single node workstation. 

There are two ways of running this command and each ways has three modes, namely search mode, freeze group mode, and general mode respectively. The default value of img_per_grp option activates search mode. The advanced parameters are set/reset in function main and set_sorting_global_variables_mpi.

\\ __1. 3D sorting from meridien iteration__: Clustering is initiated from a completed iteration of meridien refinement and imports data from there. This mode uses all meridien information (i.e., smear, normalizations and such).
  mpirun -np 48 sxsort3d_depth.py --refinement_dir='outdir_sxmeridien' --output_dir='outdir_sxsort3d_depth_iteration' --radius=30 --sym='c1' --memory_per_node=60.0 --img_per_grp=2000 

\\ __2. 3D sorting from stack__: Clustering is initiated from user-provided orientation parameters stored in stack header. This mode uses only orientation parameters, which is useful for sorting data refined, say with relion.
  mpirun -np 48 sxsort3d_depth.py --instack='bdb:data' --output_dir='outdir_sxsort3d_depth_stack' --radius=30 --sym='c1' 

\\
===== Input =====
=== Main Parameters ===
  ; %%--%%refinement_dir : Meridien refinement directory: A string denotes meridien 3D refinement directory. Sorting switches to meridien iteration mode when specified. (default none)
  ; %%--%%instack : Input images stack: A string denotes file path of input particle stack for sorting. Sorting switches to stack mode when option is specified. (default none)
  ; %%--%%output_dir : Output directory: A string denotes output directory for 3D sorting. It can be either existing or non-existing. By default, the program uses sort3d_DATA_AND_TIME for the name. Here, you can find a log.txt that describes the sequences of computations in the program. (default none)
  ; %%--%%niter_for_sorting : Iteration ID of 3D refinement for importing data: By default, the program uses the iteration at which refinement achieved the best resolution. Option is valid only for meridien iteration mode. (default -1)
  ; %%--%%nxinit : Initial image size: Image size used for MGSKmeans in case of starting sorting from a data stack. By default, the program determines window size. Option is valid only for stack mode. (default -1) 
  ; %%--%%mask3D : 3D mask: A string denotes file path of the global 3D mask for clustering. Imported from 3D refinement unless user wishes a different one in meridien iteration mode. (default none)
  ; %%--%%focus : Focus 3D mask: A string denotes file path of a binary 3D mask for focused clustering. (default none)
  ; %%--%%radius : Estimated particle radius [Pixels]: A integer value that is smaller than half of the box size. Imported from refinement unless user wishes a different one in meridien iteration mode. (default -1)
  ; %%--%%sym : Point-group symmetry: A string denotes point group symmetry of the macromolecular structure. Imported from refinement unless the user wishes a different one in meridien iteration mode. Require specification in stack mode. (default c1) 
  ; %%--%%img_per_grp : Number of images per group: User expected group size in integer. By default sorting is set on search mode. (default -1)
  ; %%--%%memory_per_node : Memory per node [GB]: User provided information about memory per node in GB (NOT per CPU). It will be used to evaluate the number of CPUs per node from user-provided MPI setting. By default, it uses 2GB * (number of CPUs per node). (default -1.0)
  ; %%--%%overhead: Overhead memory per node [GB]: User provided information about overhead memory usage per node in GB (NOT per CPU). By default, it is estimated as 5.0 GB per node. (default 5.)
  
  
  

\\
=== Advanced Parameters ===
  ; %%--%%depth_order : Depth order: An integer value defines the number of initial independent MGSKmeans runs (2^depth_order). (default 2)
  ; %%--%%nsmear : Number of smears for sorting: Fill it with 1 if user does not want to use all smears. (default -1)
  ; %%--%%orientation_groups : Number of orientation groups: Number of orientation groups in an asymmetric unit. (default 20)
  ; %%--%%not_include_unaccounted : Do unaccounted reconstruction: Do not reconstruct unaccounted elements in each generation. (default False question reversed in GUI)
  ; %%--%%notapplybckgnoise : Use background noise flag: Flag to turn off background noise. (default False question reversed in GUI)
  ; %%--%%check_smearing : Check smearing: A boolean flag to turn on Printing out average smearing of all iterations of meridien refinement. By default, program will not print. (default false)
  ; %%--%%num_core_set : Number of core set images: Map will not be reconstructed if number of core set images is less than this number. By default, the program will choose the maximum number between minimum group size and 100 as num_core_set. (default -1)
  ; %%--%%compute_on_the_fly : Compute on the fly: A boolean flag controls the number of pre-calculated smearing images to avoid memory overflow. By default, program calculates smearing images for 3D reconstruction prior constrained Kmeans. (default false)
  ; %%--%%nstep : Number of steps to decrease minimum group size: An integer number controls group size constrained Kmeans clustering. By default, it is set 5. (default 5)
  ; %%--%%not_freeze_groups : Remove small groups during within box comparison: A boolean flag to control the group searching. By default, sorting will not remove small groups. (default False)
  ; %%--%%use_umat : Use fuzzy membership of particle images in making maps: A boolean flag to apply fuzzy group membership to control sorting stability. By default, it is false. (default False)



\\
===== Output =====
Results outputted:
  - In addition to selection text files and cluster maps in the main directory, anova analysis about defocus, smearing, average norm of particles in clusters are also given in log.txt file.
  - Sorting results (selection text file, maps, and anova analysis) are also outputted in each generation. Moreover, the highest numbered cluster in each generation is created from unaccounted elements, so it has a function of a trash bin.
  - The final assignment results are saved as Cluster*.txt in the main output directory.  The unaccounted images are saved in the last cluster file in the last generation.  

\\
===== Description =====
sxsort3d_depth performs 3D clustering on data and keeps 3D orientation parameters of data unchanged. It finds out stable group members by carrying out two-way comparison of two independent Kmeans clustering runs. The Kmeans clustering has minimum group size constraint on each cluster and thus the clustering will not fail in any circumstance.

\\
=== Important Options ===
|| **Option Key** || **Discription** ||
|| %%--%%img_per_grp || The only sorting parameter user has to be determined by user. The default value sets program in cluster search mode. (default -1) ||
|| %%--%%nstep || It decreases the minimum group size during sorting and thus select out faked groups when the initial number of groups is set too large.  ||
|| %%--%%use_umat || The option enables the maps reconstructed by fuzzy group membership of particle images. It stabilizes sorting and helps to select out true groups. However, the consumed time is in proportion to the number of particle smearing. ||
|| %%--%%not_freeze_groups || Freezing group implies not removing groups during within box comparison and it allows sorting uses the strategies before v1.2. ||
|| %%--%%depth_order || The parameter resembles the previous option number of independent runs but it controls sorting in an different way. The default value of 2 is a good choice. ||
|| %%--%%orientation_groups || It divides the asymmetric unit into the specified number of orientation groups and cast the data orientation parameters into them. It is meant to prevent sorting by angle, i.e., assign certain angle to one group, for example top views to one group and side views to another. ||

\\
=== Test Results ===
1. Simulated ribosome. 
\\
17,280 particles with 64*64 image size belong to five even groups (all have 3,456 members). The command for this run is given in case 2 outputs five clusters when K= 5-11 (with focus mask). In case of K = 11 it requires with use_umat on to get five groups only. The program determines clusters by respective structural features hierarchically.
\\
== The sorting results (K=9, 19 min, 32 CPU/2 nodes) ==
|| **Group ID** || **Particles** || **% of True** ||
|| group 1 || 3303 || 97% are true members ||
|| group 2 || 3447 || 98% are true members ||
|| group 3 || 3229 || 98% are true members ||
|| group 4 || 3454 || 99% are true members ||
|| group 5 || 3442 || 99% are true members ||


2. Ribosome EMPIAR-10028: 
\\
105,247 particles with image size 360*360 with K=5. It took about 7 hours using 96 CPUs of our cluster, which is about twice the time it took to refine this set. The command for this run is given in case 1. We were able to sort out missing helix and missing domain. (See the attached movie and figure).

\\
==== Method ====
K-means, MGSK-means, reproducibility, two-way comparison.

\\
==== Reference ====
Not published yet.

\\
==== Developer Notes ====
=== 2017/12/19 Toshio Moriya ===
The following is old descriptions, and will be deleted in near future.

Important Outputs:
The results are saved in the directory specified as output_dir  ('outdir_sxsort3d_depth' in the example above). The final results are partitioned particles IDs saved in text files.

  * Cluster*.txt: Sorting results. The number of cluster files is equal to the number of classes found. These selection files contain one column for particle indexes. Input projection EM data is assumed to be number 0 to n-1.
  * vol_cluster*.hdf: Reconstructed map per cluster. User can user B_factor to adjust the visualization to decide whether a local refinement on the cluster is worth doing.
  * anova on defocus, number of smears, norm and statistics of micrographs of the final clusters and clusters produced in each generation are documented in log.txt.
  * Core_set.txt: Particles indexes that are not selected when sort3d program is done.  
  * volume_core.hdf: Map reconstructed from Core_set.txt.

Some examples for timing: 
In general, reconstruction costs more than 80% of time for each sorting. Activate do_timing variable in set_sorting_global_variables_mpi and the program prints timing of major steps. 

\\
==== Author / Maintainer ====
Zhong Huang

\\
==== Keywords ====
Category 1:: APPLICATIONS

\\
==== Files ====
sparx/bin/sxsort3d_depth.py

\\
==== See also ====
[[pipeline:meridien:sxmeridien|sxmeridien]], [[pipeline:utilities:sxheader|sxheader]], [[[pipeline:sort3d:sx3dvariability|sx3dvariability]], [[pipeline:sort3d:sxsort3d|sxsort3d]], and [[pipeline:sort3d:sxrsort3d|sxrsort3d]].

\\
==== Maturity ====
Beta:: Under development. It has been tested, The test cases/examples are available upon request. Please let us know if there are any bugs.

\\
==== Bugs ====
There are no known bugs so far.

\\
